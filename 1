/*  THIS FILE IS AN EXTENSION OF FILE main.c 
 *  ALL LICENSING AND RULES ALSO INCLUDE THIS
 *  FILE AND ALL CONNECTED FILES.
 */

#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>
#include <time.h>
#include <string.h>
#include "plib.c"

#define clear()  system("clear");
#define clear_a() printf("\033[H");
#define BOLD_ANSI "\033[1m"
#define SEL_ANSI "\033[32m"
#define DIS_ANSI "\033[31m"
#define BURRITO_CHEAP_PRICE 8.5
#define BURRITO_EXPENSIVE_PRICE 13.5
#define DELIVERY_CHARGE 2.5
#define USER_SLEEP_DELAY 1
// define callback toggles
int auto_toggle = 0;
int help_toggle = 0;
int verbose     = 0;

// define callback functions
void auto_callback(){auto_toggle = 1;}
void help_callback(){help_toggle = 1;}
void verbose_callback(){verbose = 1;}

int nrand(int min, int max) {
  srand(time(NULL));
  int range = max - min;
  return rand() % range + min;
}
	/*
	 * cheese
	 * plain
	 * spicy
	 * deluxe
	 * large
	 * gourmet
	 */
struct burrito {
	char*type;
	char*location; // 0 = delivery, 1 = pickup
	char*name;
	char*number;
	char*address;
};


// very funny
struct burrito order(){
	struct burrito order={0};
	return order;
}

int achar(){
	static struct termios oldt, newt;
	tcgetattr(STDIN_FILENO,&oldt);
	newt=oldt;
	newt.c_lflag &= ~(ICANON | ECHO );
	tcsetattr(STDIN_FILENO,TCSANOW,&newt);
	int ch=getchar();
	tcsetattr(STDIN_FILENO,TCSANOW,&oldt);
	return ch;
}

int draw_screen_implicit(char *array[],size_t array_length,char *prompt){
	int selected=0;
	if(auto_toggle) selected = nrand(0,array_length);
	clear();
	while (1){
		clear_a();
		printf("%s",prompt);
		for(int i=0;i<array_length;i++){
			if(selected == i){
				printf("%s%s>",SEL_ANSI,BOLD_ANSI);
			} else printf(" ");
			printf(" %s\033[0m\n",array[i]);
		}
		if(auto_toggle){
			break; 
		} else {
			int ch = achar();
			if (ch == 'B'){
				if(selected==array_length-1) selected=0;
				else selected++;
			} else if (ch == 'A'){
				if(selected==0) selected=array_length-1;
				else selected--;
			} else if (ch == 10) break;
		}
	}
	printf("You selected %s%s\033[0m\n",BOLD_ANSI,array[selected]);
	fflush(stdout);
	sleep(USER_SLEEP_DELAY);
	return selected;
}


char *create_label_price(const char *labels[], float price,size_t label_amount) {
	int largest=0; 
	char* output[label_amount]={};
	for(size_t i=0;i<label_amount;i++) if(largest<strlen(labels[i])) largest=strlen(labels[i]);
	for(size_t i=0;i<label_amount;i++){
		const char *label=labels[i]="";
  	size_t buffer_size = strlen(labels[i]) + 32; 
		char price_char[buffer_size];
  	if (!price_char) return NULL;  // Always check malloc
  	snprintf(price_char, buffer_size, "%s - %0.2f", label, price);
		free(price_char);
	}
	return output;
}


void seperator(char *c,int a){printf("\n");for(int i=0;i<a;i++) printf("%s",c);printf("\n\n");}
